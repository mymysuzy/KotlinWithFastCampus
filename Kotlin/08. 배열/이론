배열 -> 사실 배열보단 Collection을 훨씬 많이 쓴다.

선언 방법 (1)
    - arrayOf<자료형/생략>(값1, 값2, 값3) == 자료형ArrayOf(값1, 값2, 값3)

        * 자료형 생략했을 경우, 복수개의 자료형이 배열의 인자로 올 수 있다.
            + var array1 = arrayOf(true, false, "안녕", 10, 2.2)

        * 자료형 기재했을 경우, 해당 자료형만 인자로 올 수 있다.
            + var array2 = arrayOf<Int>(10, 20, 30)

        * <자료형>을 대체할 수 있는 방법
            + var array3 = intArrayOf(10, 20, 30)
            + var array4 = booleanArrayOf(true, false, true)

선언 방법 (2)
    - 자료형/생략가능Array(크기, {값/생략가능})
        * var array5 = Array(10, {0}) -> 10칸 짜리 배열을 만들고 기본값으로 0을 넣어준다.

    - 자료형 명시
        * var array6 = IntArray(10, {0})
        * var array7 = Array<Int>(10, {0})
        * var array8 = Array<String>(10, {"HI"}) -> 이건 불가능.

선언 방법 (3) -> 가장 간단. 채택!
    - Array<자료형/생략가능>(크기, {값/생략가능})
        * var array9 = Array(10, {0}) -> 디폴트 값의 자료형으로 정해진 것.
        * var array10 = Array<Int>(10, {0})
        * var array11 = Array<String>(10, {"HI"})

///////////////////////////////////////////////////////////////////////////////////
배열에 값을 넣는 방법

방법(1)
    - 배열명[index] = 값
        * array12[0] = 10
        * array13[1] = 20

방법(2)
    -  배열명.set(index, 값)
        * array14.set(0, 10)
        * array15.set(1, 20)

///////////////////////////////////////////////////////////////////////////////////
배열에 있는 값을 가져오는 방법

- 배열명[인덱스]
    * val value1 = array15[1]
- 배열명.get(인덱스)
    * val value2 = array15.get(1)
